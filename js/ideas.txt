d = # of dice_face
n = # of dice

- dice_table_object
dice_table = { value : possibility, ... }
ex. d6_table = {1 : 0.1666, 2: 0.1666, ... 6 : 0.16666}


- basic_dice
1. naive approach
for example as 3d6, I can make every possible outcome like
[1,1,1], [1,1,2], ... [6,6,5], [6,6,6] then sum it up.
which may needs O(d^n) space and time
100d10 would consume 10^100 time and space.

2. one after another
3d6 is possiblity table of 1d6 * 2d6,
2d6 is 1d6 * 2d6
by this approach I may need O(n*n*d) space 
and O(n*n*n*d) of time.(??? not sure...)

- count
possibiity of k  * possibiity of (n-k) * some combination?

- explode
simply tweak to dice_table with exploding possibility

- keep highest, keep lowest kth
no idea yet.

- keep higher, keep lower D_a and D_b
get each table of D_a and D_b.
compare and aggregate it.
